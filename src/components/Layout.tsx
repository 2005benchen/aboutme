// src/components/Layout.tsx
"use client";

import React, { useState, useEffect } from "react";
import Link from "next/link";
import DarkModeToggle from "./DarkModeToggle";
import Head from "next/head";
import Image from "next/image"; // Use next/image instead of <img>
import "@/utils/suppressErrors"; // If needed
import AOS from "aos"; // Import AOS
import "aos/dist/aos.css"; // Import AOS styles
import Script from "next/script";

const Layout: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [isScrolled, setIsScrolled] = useState(false);
  const [isMenuOpen, setIsMenuOpen] = useState(false);

  // Effect to handle scroll position preservation
  useEffect(() => {
    // Function to restore scroll position
    const restoreScrollPosition = () => {
      const savedScrollPosition = sessionStorage.getItem("scrollPosition");
      if (savedScrollPosition) {
        // Parse and scroll the window
        const scrollY = parseInt(savedScrollPosition, 10);
        window.scrollTo(0, scrollY);
        sessionStorage.removeItem("scrollPosition");
      }
    };

    // Restore scroll position on component mount
    restoreScrollPosition();

    // Initialize AOS
    AOS.init({
      duration: 2000,
      once: false,
      mirror: true,
    });

    // Save scroll position before the page unloads
    const handleBeforeUnload = () => {
      sessionStorage.setItem("scrollPosition", window.scrollY.toString());
    };

    window.addEventListener("beforeunload", handleBeforeUnload);
    return () => {
      window.removeEventListener("beforeunload", handleBeforeUnload);
    };
  }, []);

  // Effect to handle scroll state for header background
  useEffect(() => {
    const handleScroll = () => {
      setIsScrolled(window.scrollY > 50);
    };

    window.addEventListener("scroll", handleScroll);
    handleScroll(); // Initial check
    return () => {
      window.removeEventListener("scroll", handleScroll);
    };
  }, []);

  // Close mobile menu when window is resized to medium and above
  useEffect(() => {
    const handleResize = () => {
      if (window.innerWidth >= 768 && isMenuOpen) {
        setIsMenuOpen(false);
      }
    };

    window.addEventListener("resize", handleResize);
    return () => window.removeEventListener("resize", handleResize);
  }, [isMenuOpen]);

  return (
    <>
      <Head>
        <title>Ben Chen - Portfolio</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
        {/* Prevent horizontal scaling */}
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
      </Head>

      {/* Load SociableKit Script Globally */}
      <Script
        src="https://widgets.sociablekit.com/linkedin-profile-posts/widget.js"
        strategy="afterInteractive"
        onLoad={() => {
          if (window.SociableKit && typeof window.SociableKit.init === "function") {
            window.SociableKit.init();
          }
        }}
      />

      <header
        className={`fixed top-0 w-full z-50 transition-all duration-300 min-h-[70px] flex items-center ${
          isScrolled
            ? "bg-white bg-opacity-50 backdrop-blur dark:bg-gray-800 dark:bg-opacity-50"
            : "bg-transparent"
        } text-black dark:text-gray-200`}
      >
        <div className="container mx-auto px-4 flex justify-between items-center h-full">
          {/* Logo Section */}
          <div className="flex items-center gap-4">
            <Image
              src="/ben.jpg"
              alt="Ben Chen Logo"
              className="rounded-full object-cover"
              width={40}
              height={40}
            />
            <h1 className="text-2xl">Ben Chen</h1>
          </div>

          {/* Desktop Navigation (hidden on small screens, displayed on md+) */}
          <nav className="hidden md:flex space-x-6 items-center">
            <Link href="/" legacyBehavior>
              <a className="hover:text-yellow-500 transition-colors duration-200">Home</a>
            </Link>
            <Link href="/resume" legacyBehavior>
              <a className="hover:text-yellow-500 transition-colors duration-200">Resume</a>
            </Link>
            <Link href="/contact" legacyBehavior>
              <a className="hover:text-yellow-500 transition-colors duration-200">Contact</a>
            </Link>
          </nav>

          {/* Dark Mode Toggle */}
          <div className="flex items-center justify-center">
            <DarkModeToggle className="w-8 h-8" />
          </div>

          {/* Mobile Hamburger Button */}
          <div className="md:hidden ml-2">
            <button
              onClick={() => setIsMenuOpen(!isMenuOpen)}
              className="focus:outline-none flex items-center justify-center"
              aria-label="Toggle Menu"
            >
              {!isMenuOpen ? (
                <svg
                  className="w-6 h-6 text-black dark:text-gray-200"
                  fill="none"
                  stroke="currentColor"
                  strokeWidth={2}
                  viewBox="0 0 24 24"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <path strokeLinecap="round" strokeLinejoin="round" d="M4 6h16M4 12h16M4 18h16" />
                </svg>
              ) : (
                <svg
                  className="w-6 h-6 text-black dark:text-gray-200"
                  fill="none"
                  stroke="currentColor"
                  strokeWidth={2}
                  viewBox="0 0 24 24"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <path strokeLinecap="round" strokeLinejoin="round" d="M6 18L18 6M6 6l12 12" />
                </svg>
              )}
            </button>
          </div>
        </div>

        {/* Mobile Menu Dropdown with Animation */}
        <nav
          className={`md:hidden absolute top-full left-0 w-full bg-white dark:bg-gray-800 z-40 shadow-lg transform transition-transform duration-300 ease-in-out ${
            isMenuOpen
              ? "opacity-100 translate-y-0"
              : "opacity-0 -translate-y-4 pointer-events-none"
          }`}
        >
          <ul className="flex flex-col p-4 space-y-4 text-black dark:text-gray-200">
            <li>
              <Link href="/" legacyBehavior>
                <a
                  onClick={() => setIsMenuOpen(false)}
                  className="hover:text-yellow-500 transition-colors duration-200"
                >
                  Home
                </a>
              </Link>
            </li>
            <li>
              <Link href="/resume" legacyBehavior>
                <a
                  onClick={() => setIsMenuOpen(false)}
                  className="hover:text-yellow-500 transition-colors duration-200"
                >
                  Resume
                </a>
              </Link>
            </li>
            <li>
              <Link href="/contact" legacyBehavior>
                <a
                  onClick={() => setIsMenuOpen(false)}
                  className="hover:text-yellow-500 transition-colors duration-200"
                >
                  Contact
                </a>
              </Link>
            </li>
          </ul>
        </nav>
      </header>

      <main className="pt-20 min-h-screen bg-gray-100 dark:bg-gray-800 text-gray-800 dark:text-gray-200">
        {children}
      </main>

      <footer className="bg-gray-800 dark:bg-gray-900 text-white p-4 text-center">
        &copy; {new Date().getFullYear()} Ben Chen. All rights reserved.
      </footer>

      {/* Prevent horizontal scroll */}
      <style jsx global>{`
        body {
          overflow-x: hidden;
        }
      `}</style>
    </>
  );
};

export default Layout;
